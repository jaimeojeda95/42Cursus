char	*create_storage(int fd, char *storage, ssize_t *bytes_read)
{
	char	*buffer;
	char	*temp;

	buffer = malloc(BUFFER_SIZE + 1);
	if (!buffer)
		return (NULL);
	if (!storage)
	{
		storage = ft_strdup("");
		if (!storage)
		{
			free (buffer);
			return (NULL);
		}
	}
	while (!ft_strchr(storage, '\n') && *bytes_read != 0)
	{
		*bytes_read = read(fd, buffer, BUFFER_SIZE);
		if (*bytes_read == -1)
		{
			free(storage);
			free (buffer);
			return (NULL);
		}
		buffer[*bytes_read] = '\0';
		temp = ft_strjoin(storage, buffer);
		free(storage);
		storage = temp;
	}
	free (buffer);
	return (storage);
}

char	*ft_separate_lines(char *storage)
{
	size_t	i;

	if (!storage || storage[0] == '\0')
		return (NULL);
	i = 0;
	// busca el fin de línea
	while (storage[i] && storage[i] != '\n')
		i++;
	// si encuentra '\n', incluye el salto
	if (storage[i] == '\n')
		i++;
	// devuelve la línea, con o sin '\n'
	return (ft_substr(storage, 0, i));
}

char	*ft_separate_lines(char *storage, ssize_t bytes_read)
{
	char	*new_str1;
	char	*str_temp;
	int		i;
	int		j;

	i = 0;
	j = 0;
	new_str1 = NULL;
	while (storage[i] != '\0')
	{
		if (storage[i] == '\n')
		{
			str_temp = ft_substr(storage, j, (i - j) + 1);
			if (new_str1)
				free(new_str1);
			new_str1 = ft_strdup(str_temp);
			free(str_temp);
		}
		i++;
		if (bytes_read == 0)
		{
			if (storage)
			{
				str_temp = ft_substr(storage, j, (i - j) + 1);
				if (new_str1)
					free (new_str1);
				new_str1 = ft_strdup(str_temp);
				free (str_temp);
			}
			else
			{
				free (storage);
				storage = NULL;
				return (NULL);
			}
		}
	}
	return (new_str1);
}

char	*ft_separate_lines(char *storage, ssize_t bytes_read)
{
	char	*new_str1 = NULL;
	char	*str_temp;
	int		i;
	int		j;
	int		found_newline;

	i = 0;
	j = 0;
	found_newline = 0;
	while (storage[i] != '\0' && !found_newline)
	{
		if (storage[i] == '\n')
		{
			str_temp = ft_substr(storage, j, (i - j) + 1);
			if (new_str1)
				free(new_str1);
			new_str1 = ft_strdup(str_temp);
			free(str_temp);
			found_newline = 1;
		}
		i++;
	}
	if (!found_newline && bytes_read == 0 && storage[0] != '\0')
	{
		str_temp = ft_substr(storage, j, i - j);
		new_str1 = ft_strdup(str_temp);
		free(str_temp);
	}
	return (new_str1);
}

char	*create_storage(int fd, char *storage, ssize_t *bytes_read)
{
	char	buffer[BUFFER_SIZE + 1];
	char	*temp;

	*bytes_read = 1;
	while (!ft_strchr(storage, '\n') && *bytes_read != 0)
	{
		*bytes_read = read(fd, buffer, BUFFER_SIZE);
		if (*bytes_read == -1)
		{
			free(storage);
			// perror("Error al leer el archivo");
			return (NULL);
		}
		buffer[*bytes_read] = '\0';
		temp = ft_strjoin(storage, buffer);
		free(storage);
		storage = temp;
		// storage = ft_strdup(temp);
		// free(temp);
	}
	return (storage);
}

/* char *end_of_file(char *storage, int i, int j)
{
	char	*new_str2 = NULL;
	char	*str_temp;
	
	if (storage)
	{
		str_temp = ft_substr(storage, j, (i - j) + 1);
		if (new_str2)
			free(new_str2);
		new_str2 = ft_strdup(str_temp);
		free(str_temp);
	}
	else
	{
		free(storage);
		storage = NULL;
		return (NULL);
	}
} */